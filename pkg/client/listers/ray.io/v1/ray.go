/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/ray-project/ray-operator/pkg/apis/ray.io/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RayLister helps list Rays.
type RayLister interface {
	// List lists all Rays in the indexer.
	List(selector labels.Selector) (ret []*v1.Ray, err error)
	// Rays returns an object that can list and get Rays.
	Rays(namespace string) RayNamespaceLister
	RayListerExpansion
}

// rayLister implements the RayLister interface.
type rayLister struct {
	indexer cache.Indexer
}

// NewRayLister returns a new RayLister.
func NewRayLister(indexer cache.Indexer) RayLister {
	return &rayLister{indexer: indexer}
}

// List lists all Rays in the indexer.
func (s *rayLister) List(selector labels.Selector) (ret []*v1.Ray, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Ray))
	})
	return ret, err
}

// Rays returns an object that can list and get Rays.
func (s *rayLister) Rays(namespace string) RayNamespaceLister {
	return rayNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RayNamespaceLister helps list and get Rays.
type RayNamespaceLister interface {
	// List lists all Rays in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Ray, err error)
	// Get retrieves the Ray from the indexer for a given namespace and name.
	Get(name string) (*v1.Ray, error)
	RayNamespaceListerExpansion
}

// rayNamespaceLister implements the RayNamespaceLister
// interface.
type rayNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Rays in the indexer for a given namespace.
func (s rayNamespaceLister) List(selector labels.Selector) (ret []*v1.Ray, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Ray))
	})
	return ret, err
}

// Get retrieves the Ray from the indexer for a given namespace and name.
func (s rayNamespaceLister) Get(name string) (*v1.Ray, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("ray"), name)
	}
	return obj.(*v1.Ray), nil
}
